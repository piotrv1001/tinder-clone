datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String    @unique
  emailVerified    DateTime?
  image            String?
  description      String?
  age              Int?
  height           Int?
  relationshipGoal String?

  // Basics
  education   String?
  chat        String?
  loveStyle   String?
  familyPlans String?

  // Lifestyle
  smoker  String?
  gym     String?
  diet    String?
  alcohol String?
  sleep   String?
  pets    String?

  jobTitle String?
  company  String?
  school   String?

  accounts Account[]
  sessions Session[]
  images   Image[]
  passions Passion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Passion {
  id     String @id @default(cuid())
  name   String
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Image {
  id     String @id @default(cuid())
  url    String
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
